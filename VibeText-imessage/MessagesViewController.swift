//
//  MessagesViewController.swift
//  VibeText-imessage
//
//  Created by Nick DeMarco on 7/29/25.
//

import UIKit
import Messages
import SwiftUI

@objc(MessagesViewController)
class MessagesViewController: MSMessagesAppViewController {
    private var hostingController: UIHostingController<VibeTextMessageView>?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        print("üéØ VibeText iMessage Extension: viewDidLoad called")
        setupVibeTextView()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        print("üéØ VibeText iMessage Extension: viewWillAppear called")
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        print("üéØ VibeText iMessage Extension: viewDidAppear called")
    }
    
    private func setupVibeTextView() {
        print("üéØ VibeText iMessage Extension: setupVibeTextView called")
        // Create the SwiftUI view with message sending capability
        let vibeTextView = VibeTextMessageView { [weak self] messageText in
            self?.sendMessage(text: messageText)
        }
        
        // Create hosting controller
        let hostingController = UIHostingController(rootView: vibeTextView)
        self.hostingController = hostingController
        
        // Add as child view controller
        addChild(hostingController)
        view.addSubview(hostingController.view)
        hostingController.didMove(toParent: self)
        
        // Setup constraints
        hostingController.view.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            hostingController.view.topAnchor.constraint(equalTo: view.topAnchor),
            hostingController.view.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            hostingController.view.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            hostingController.view.trailingAnchor.constraint(equalTo: view.trailingAnchor)
        ])
    }
    
    private func sendMessage(text: String) {
        guard let conversation = activeConversation else {
            print("‚ùå No active conversation")
            return
        }
        
        // Create the message
        let message = MSMessage()
        message.summaryText = text
        
        // Insert the message into the conversation
        conversation.insert(message) { error in
            if let error = error {
                print("‚ùå Failed to send message: \(error.localizedDescription)")
            } else {
                print("‚úÖ Message sent successfully")
            }
        }
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        print("üì± iMessage extension becoming active")
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        print("üì± iMessage extension resigning active")
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        print("üì± Received message from remote device")
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
        print("üì± Started sending message")
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
        print("üì± Cancelled sending message")
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        print("üì± Will transition to presentation style: \(presentationStyle)")
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
        print("üì± Did transition to presentation style: \(presentationStyle)")
    }
}
